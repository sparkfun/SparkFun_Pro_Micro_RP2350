{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"arduino_setup/","title":"Arduino","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p>"},{"location":"arduino_setup/#arduino-pico-boards","title":"Arduino-Pico Boards","text":"<p>The SparkFun Pro Micro - RP2350 is supported on the Arduino IDE in the Arduino-Pico boards package. To install the package, open the Preferences menu by navigating to File &gt; Preferences. Look at the bottom of the Preferences menu for \"Additional boards manager URLS\" and then copy this JSON link into that field:</p> <p><code>     https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json </code></p> <p>Click \"OK\" to close this menu then navigate to the Boards Manager tool and search for \"pico\" and download the latest release of \"Raspberry Pi Pico\" (4.0.1 or later).</p> <p></p> <p>For more information on using the Arduino-Pico boards package, check out their documentation page.</p>"},{"location":"basic_assembly/","title":"Basic Assembly","text":"<p>Getting started with the Pro Micro - RP2350 is as easy as plugging it in over USB. The board ships with simple code that cycles the WS2812 RGB LED through a rainbow so on initial power up you should see that cycle.</p> <p></p> <p>From here, you can quickly get started programming the board with either the Pico SDK or MicroPython. If you'd like to quickly get started with a variety of I<sup>2</sup>C devices, SparkFun carries a variety of Qwiic boards with MicroPython support such as the Optical Tracking Odometry Sensor as shown in the assembly photo below:</p> <p></p>"},{"location":"camera_assembly/","title":"Arducam Demo Assembly","text":"<p>Important!</p> <p>This is an advanced example that assumes users are familiar with using the Pico SDK to build and run projects. If you have not previously used the Pico SDK we strongly encourage going through Raspberry Pi's tutorials on getting started with it before continuing with this example.</p> <p>If you'd like to follow along with the Arducam PRSAM Demo in this guide, you'll need to connect the Arducam M5 camera module to the Pro Micro over both SPI and I<sup>2</sup>C as well as connections for input voltage and ground. We recommend soldering male headers to the Pro Micro as the photo below shows and then plugging it into a breadboard for easy prototyping.</p> <p></p> <ul> <li> How to Solder: Through-Hole Soldering </li> </ul> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p> <p>Next, connect the Arducam wire harness to the camera assembly if you have not already then connect it to the Pro Micro - RP2350 following the assembly table below:</p> Pro Micro - RP2350 Arducam Camera 5 CS 3 MOSI/COPI 4 MISO/CIPO 2 SCK 8 SDA 9 SCL 3V3 VCC GND GND <p>Finally, you'll want to connect a jumper wire between A3 and GND. The code refers to the state of A3/GPIO29 (called 29 in the code) to run the image processing algorithm. The code sets A3/GPIO29 as an input with an internal pull-up resistor enabled. When the pin is pulled LOW through the jumper wire there is no image processing and the image should appear as a normal greyscale. When the jumper is removed, the code enables the processing algorithm to apply image thresholding. </p> <p>With the wiring completed, it should look similar to the photo below</p> <p></p>"},{"location":"camera_demo/","title":"Arducam Demo","text":"<p>Important!</p> <p>This is an advanced example that assumes users are familiar with using the Pico SDK to build and run projects. If you have not previously used the Pico SDK we strongly encourage going through Raspberry Pi's tutorials on getting started with it before continuing with this example.</p> <p>The Arducam PSRAM Example is a modified version of Arducam's Videostreaming example that uses the Arducam to take still images and send them to the RP2350 and then process and transmit the images over USB to be displayed using a Processing sketch. The primary goal of this example is to demonstrate how to set up and use PSRAM on the Pro Micro - RP2350 using the Pico SDK and the cool images are a neat bonus!</p> <p></p>"},{"location":"camera_demo/#software-requirements","title":"Software Requirements","text":"<p>Along with the Pico SDK, you'll need to install the following items for this demo to run properly.</p>"},{"location":"camera_demo/#pico-sdk-cam-driver","title":"Pico SDK Cam Driver","text":"<p>This example uses the Pico SDK, Arducam's Pico Cam driver for the SDK. The example files include the necessary Arducam driver installation but if you'd like to install it separately you can find it in the ArduCAM GitHub repo here.</p>"},{"location":"camera_demo/#processing-software","title":"Processing Software","text":"<p>You'll also need to download and install the Processing software. You can download the program by clicking the button below:</p> <p> Processing Downloads Page </p>"},{"location":"camera_demo/#arducam-demo-files","title":"Arducam Demo Files","text":"<p>We've included pretty much everything you'll need to run the example in the Pro Micro - RP2350 GitHub repository here. If you'd like to download a compressed (ZIP) copy of the repository, click the button below:</p> <p> SparkFun Pro Micro - RP2350 Github Repository (ZIP) </p> <p>The C++, .uf2, and cmake.txt files for the example can be found in the \"/Examples/Arducam_Demo\" folder. Take note of where these are as we'll need them later on.</p>"},{"location":"camera_demo/#uploading-and-running-demo","title":"Uploading and Running Demo","text":"<p>With the Pico SDK set up on your computer, use the following command from the example directory to build the project:</p> <pre><code>mkdir build\ncd build\ncmake .. -DPICO_PLATFORM=rp2350 -DPICO_BOARD=sparkfun_promicro_rp2350\nmake\n</code></pre> <p>Next, set the Pro Micro in boot mode and upload the .uf2 file to the board.</p>"},{"location":"camera_demo/#processing-sketch","title":"Processing Sketch","text":"<p>Now that the Pro Micro - RP2350 is running the demo code, open the Processing sketch included in the GitHub repository download. Finally, click the \"Run\" button in the top left of the Processing window and it should open a new window to display the images the camera is taking. We've done our best to speed up the time between the Arducam capturing an image and displaying it on the computer but it can take a few seconds in between shots. With the camera steady, you should start to see greyscale images like this fancy photo of the ceiling in the SparkFun engineering department:</p> <p></p> <p>Now try unplugging the jumper wire between A3 and GND and the next images should be in purely black and white (thresholded) like the screenshot below:</p> <p></p>"},{"location":"camera_demo/#psram-code-to-note","title":"PSRAM Code to Note","text":"<p>Pico SDK PSRAM Support</p> <p>The Pico SDK may include official PSRAM support for the Pro Micro - RP2350 in the future. This is simply a demo to get users started while that support is being implemented.</p> <p>The primary goal of this demo is to show how to implement and use PSRAM in your own projects. It's fairly involved and requires overriding the default PSRAM allocations to work with the Pro Micro.</p>"},{"location":"camera_demo/#cmakeliststxt","title":"CMakeLists.txt","text":"<p>The CMakeLists.txt file includes the commands to override the default allocation to use a custom allocation created in the \"sfe_pico_alloc\" folder.</p> <pre><code># use our own allocator\nset(SKIP_PICO_MALLOC 1)\n</code></pre> <p>It then adds a subdirectory called \"sfe_pico_alloc\" to import the custom PSRAM memory allocation for the Pro Micro - RP2350.</p> <pre><code>add_subdirectory(sfe_pico_alloc)\n\n# pull in common dependencies and additional spi hardware support\ntarget_link_libraries(arducam_demo \n    pico_stdlib\n    hardware_dma\n    hardware_i2c\n    hardware_pwm\n    ArduCAM\n    sfe_pico_alloc\n)\n</code></pre>"},{"location":"camera_demo/#c-psram","title":"C++ PSRAM","text":"<p>The code snippet below shows how to configure and use PSRAM with <code>malloc()</code>.</p> <pre><code>// Create buffer to store image. In this demo, malloc() has been configure to\n// use the PSRAM of the SparkFun Pro Micro RP2350, so you don't need to do\n// anything else to use the PSRAM!\nimageBuf = (uint8_t*) malloc(nRows * nCols);\nif (!imageBuf)\n{\n    // Always good practice to verify that malloc() worked\n    printf(\"Malloc failed! Exiting example\\n\");\n    return 1;\n}\n</code></pre>"},{"location":"circuitpython_setup/","title":"CircuitPython","text":""},{"location":"circuitpython_setup/#setup","title":"Setup","text":"<p>The Pro Micro - RP2350 is included in the latest release of CircuitPython. If you've never used CircuitPython before, take a read through their tutorial here or click the button below:</p> <p> Welcome to CircuitPython </p>"},{"location":"circuitpython_setup/#thing-plus-rp2350-firmware","title":"Thing Plus - RP2350 Firmware","text":"<p>Download the latest firmware for the Pro Micro - RP2350 from the CircuitPython downloads page and search for \"Pro Micro RP2350\".</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's take a closer look at the RP2350 and other hardware on this Pro Micro.</p>"},{"location":"hardware_overview/#raspberry-pi-rp2350","title":"Raspberry Pi RP2350","text":"<p>The RP2350 from Raspberry Pi packs a whole lot of computing punch in a tiny package. The RP2350 is a unique dual-core microcontroller that has four internal processors (two Arm Cortex-M33 and two Hazard3 RISC-V processors @150 MHz), though you can only select any two of these four to run at the same time. </p> <p></p> <p>This internal configuration allows users to customize the chip to their preferred architecture or to use one of each! The RP2350 includes 520kB of on-chip SRAM in ten independent banks and 8kB of one-time-programmable (OTP) storage. It also has an impressive set of security features including optional boot signing with protected OTP storage for the boot decryption key, global bus filtering (based on either Arm or RISC-V security and privilege levels) and more. For a complete overview of the RP2350, refer to the datasheet.</p> <p>The Pro Micro - RP2350 uses the \"A\" version of the microcontroller which has 30 3.3V-tolerant GPIO with 4 analog inputs and also includes the following peripheral options:</p> <ul> <li>2x UART</li> <li>2x SPI</li> <li>2x I<sup>2</sup>C</li> <li>24 PWM</li> <li>USB 1.1 Controller</li> <li>12 PIO State Machines</li> <li>1x High-Speed Transmit (HSTX) Peripheral for DVI/DSI support (not available on Pro Micro)</li> </ul> <p>Pro Micro Footprint Constraints</p> <p>Due to size constraints on the Pro Micro footprint, only 18 GPIO are broken out, including all four analog inputs. Unfortunately, this means HSTX is not supported on the Pro Micro - RP2350.</p> <p>The RP2350 uses five separate power supplies though this board (and most applications) combines several of them into a single regulated 3.3V supply voltage provided either over the USB-C connector or to the RAW pin. If using the RAW pin, max input voltage is 5.3V as RAW connects directly to the WS2812 LED. </p>"},{"location":"hardware_overview/#memory","title":"Memory","text":""},{"location":"hardware_overview/#w25q128-flash","title":"W25Q128 Flash","text":"<p>The W25Q128 Flash IC adds 16MB of extra programming space on the Pro Micro. This connects to the RP2350 over QSPI. </p> <p></p>"},{"location":"hardware_overview/#psram","title":"PSRAM","text":"<p>The Pro Micro also includes an 8MB PSRAM IC for dynamic storage. This also connects to the RP2350 over QSPI. PSRAM support is included in the SparkFun MicroPython \"early release\" firmware found later in this guide and on the product page, but is not natively supported in the Pico SDK as of release. Refer to the Arducam Demo section of this guide for information on how to enable and set up PSRAM using the Pico SDK.</p> <p></p> <p>For a complete overview of the PSRAM IC, refer to the datasheet.</p>"},{"location":"hardware_overview/#connectors-pinout","title":"Connectors &amp; Pinout","text":""},{"location":"hardware_overview/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB-C connector on the board acts as the primary power and programming interface. It also has surface mount solder pads on the bottom of the board for connections to the USB data lines and USB voltage. The USB-C voltage is regulated down to 3.3V which powers all components on the board. The board also has a RAW PTH pin to provide a dedicated supply voltage. If using this pin, the maximum voltage allowed is 5.3V as RAW connects directly to the WS2812.</p> <p></p>"},{"location":"hardware_overview/#qwiic-connector","title":"Qwiic Connector","text":"<p>The board includes a Qwiic connector connected to GPIO 16 (SCL) and GPIO 17 (SDA) with pull-up resistors to 3.3V.</p> <p></p>"},{"location":"hardware_overview/#pinout","title":"Pinout","text":"<p>This Pro Micro breaks out a total of 28 pins from the RP2350 including four analog pins, two UART interfaces, SPI, and six GPIO. All I/O pins are 3.3V tolerant.</p> <p></p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>This Pro Micro has two LEDs; a red Power LED tied to the 3.3V line and a a WS2812 RGB LED connected to pin 25 on the RP2350.</p> <p></p> <p>The board also has a solder pad on the bottom of the board labeled D0 that users can solder to if they would like to daisy chain more WS2812 LEDs to the one on the board.</p>"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>The board has two push buttons connected to the RP2350's Reset and Boot lines.</p> <p></p> <p>Holding down the BOOT button during power-up or reset bypasses Flash boot mode and forces the RP2350 into USB boot mode. The buttons are labeled on the back side of the board. If you are looking at them in the orientation of the image above, the BOOT button is on top and the RESET button is on bottom.</p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p> <p>There are two solder jumpers on the Pro Micro labeled PWR and SHLD.</p> <p></p> <p>The PWR jumper completes the Power LED circuit and is closed by default. Open it to disable the power LED when trying to minimize the total current draw of the board. The SHLD jumper ties the USB-C connector's shield pin to the Pro Micro's ground plane and is closed by default. Open it to isolate this pin from the board's ground.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>This board matches the Pro Micro footprint and measures 1.3in x 0.7in (33.02mm x 17.78mm).</p> <p></p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files for the board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"introduction/","title":"Introduction","text":"<ul> <li> <p> SparkFun Pro Micro - RP2350 SKU: DEV-24870 <p> <p> </p> <li> <p>The SparkFun Pro Micro - RP2350 provides a powerful development platform in SparkFun's compact Pro Micro form factor built around the RP2350 from the Raspberry Pi Foundation. This board uses the updated Pro Micro form factor and includes a USB-C connector, Qwiic connector, WS2812B addressable RGB LED, Boot and Reset buttons, resettable PTC fuse as well as PTH and castellated solder pads. This board also includes external memory for the RP2350 with 16MB Flash and 8MB PSRAM both tied to the RP2350's QSPI controller.      The RP2350 is a unique dual-core microcontroller with two ARM<sup>\u00ae</sup> Cortex<sup>\u00ae</sup> M33 processors and two Hazard3 RISC-V processors, all running at up to 150 MHz! Now, this doesn't mean the RP2350 is a quad-core microcontroller. Instead, users can select which two processors to run on boot instead. You can run two processors of the same type or one of each. The RP2350 also features 520kB SRAM in ten banks, a host of peripherals including two UARTs, two SPI and two I<sup>2</sup>C controllers, and a USB 1.1 controller for host and device support.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>For basic use of the Pro Micro - RP2350 all you'll need is a USB-C cable like the ones listed below:</p> <ul> <li> <p> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot CAB-14743 </p> <li> <p> <p> </p> <p> Reversible USB A to C Cable - 2m CAB-15424 </p> <p>You may also want to get a Qwiic cable or kit to connect the Pro Micro - RP2350 to other Qwiic devices:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit PRT-15081 </p>"},{"location":"introduction/#tools","title":"Tools","text":"<p>If you prefer a soldered connection or want to modify the solder jumpers on this board, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> PINECIL - Smart Mini Portable Soldering Iron TOL-23913 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL TOL-14579 </p>"},{"location":"introduction/#camera-psram-example-materials","title":"Camera PSRAM Example Materials","text":"<p>This guide includes a detailed example on how to use the PSRAM included on the Pro Micro - RP2350 using a camera connected to the board. If you'd like to follow along with that example, you'll need the following materials. You'll certainly need the camera linked below along with optionaly headers, a breadboard, and jumper wire for prototyping the circuit.</p> <ul> <li> <p> <p>Arducam 5MP Plus OV5642 Mini Camera Module DEV-18440</p> <li> <p> <p>Break Away Headers - Straight PRT-00116</p> <li> <p> <p>Breadboard - Full-Size (Bare) PRT-12615</p> <li> <p> <p>Jumper Wire Kit - 140pcs PRT-00124</p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"micropython_examples/","title":"MicroPython Examples","text":""},{"location":"micropython_examples/#verify-micropython-firmware-hardware","title":"Verify MicroPython Firmware &amp; Hardware","text":"<p>First, to make sure everything is running properly, use the <code>sys</code> module to verify the firmware version and machine/board running. Open your preferred interface and enter the following prompts and you should see something similar to the printout below:</p> <pre><code>import sys\nsys.implementation\n(name='micropython', version=(1, 24, 0, 'preview'), _machine='SparkFun Pro Micro RP2350 with RP2350', _mpy=7942)\n</code></pre>"},{"location":"micropython_examples/#verify-memory-internal-and-psram","title":"Verify Memory (Internal and PSRAM)","text":"<p>Next, we can verify the total free memory on the Pro Micro which includes the built-in memory on the RP2350 as well as the 8MB PSRAM. We'll use the <code>gc</code> module for this so type in the prompt below and you should see a response close to the value below:</p> <pre><code>import gc\ngc.mem_free()\n8640352\n</code></pre>"},{"location":"micropython_examples/#ws2812-led-control","title":"WS2812 LED Control","text":"<p>Finally, we'll make sure we can properly control the WS2812 LED on the Pro Micro using the <code>machine</code> and <code>neopixel</code> classes. The WS2812 Data In pin connects to I/O 25 on the RP2350 so we'll create a pin for it as an OUTPUT and assign it to the LED object. Next, we'll set the color to red and finally write the color values to the LED. The code below goes through all these steps so try copying it on your machine and you should see the WS2812 LED turn red.</p> <pre><code>import machine, neopixel\npin = machine.Pin(25, machine.Pin.OUT)\nled = neopixel.NeoPixel(pin, 1)\nled[0] = (255, 0, 0)\nled.write()\n</code></pre> <p>Try playing around with other values between 0 and 255 for the three colors (R, G, B) and then writing the changes to switch the LED's displayed color.</p>"},{"location":"micropython_setup/","title":"MicroPython","text":""},{"location":"micropython_setup/#setup","title":"Setup","text":"<p>MicroPython is an application of the Python 3 language that runs on microcontrollers like the Pro Micro - RP2350 that allows you to easily interact with the board directly over a USB serial interface through either a command line interface or your preferred Python IDE such as Thonny. We'll do a quick overview of how to download MicroPython firmware on to the Pro Micro - RP2350 but for a complete overview of using MicroPython with this and other RP2350 boards, head over to Raspberry Pi's documentation by clicking the button below:</p> <p> Raspberry Pi MicroPython Docs </p>"},{"location":"micropython_setup/#uf2-firmware","title":"UF2 Firmware","text":"<p>As of this writing, we're waiting on the next release of MicroPython to include UF2 files for the Pro Micro - RP2350 so to get users started before then, we have Beta releases of MicroPython firmware available here or by clicking the button below:</p> <p> SparkFun MicroPython Beta Releases </p> <p>Download the latest release then put the Pro Micro - RP2350 into UF2 bootloader mode and open the location the board appeared as a USB storage device (it should appear as \"RP2350\"). Next, drag and drop the UF2 file into the RP2350 folder and the board should reboot. Next, open up your preferred MicroPython IDE (or command line interface) and you can start interacting with your Pro Micro. Read on to the MicroPython examples section for a few quick examples to make sure everything is working properly.</p>"},{"location":"picoSDK_setup/","title":"Pico SDK","text":""},{"location":"picoSDK_setup/#raspberry-pi-pico-sdk","title":"Raspberry Pi Pico SDK","text":"<p>The Pico C SDK is a C/C++ development kit for Raspberry Pi microcontrollers including the RP2350. Click on the links below for complete documentation on installing and using the SDK.</p> <p> Pico C SDK Documentation </p> <p> Pico C SDK GitHub Repository </p>"},{"location":"picoSDK_setup/#pro-micro-rp2350-board-definition","title":"Pro Micro - RP2350 Board Definition","text":"<p>With the release of Pico SDK v2.1, the Pro Micro - RP2350 is included with it's on board definition. When uploading, select <code>sparkfun_promicro_rp2350</code>.</p>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to the SparkFun Pro Micro RP2350, check out the links listed here: </p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> <li>RP2350 Datasheet (PDF)</li> <li>APS6404L PRSAM Datasheet (PDF)</li> <li>RP2350 MicroPython Firmware (Beta)</li> <li>SparkFun Pico SDK Library</li> <li>Arduino Pico Arduino Core</li> <li>Raspberry Pi RP2350 Microcontroller Documentation</li> <li>Hardware GitHub Respository</li> <li>SFE Product Showcase</li> </ul>"},{"location":"single_page/","title":"Hardware Overview","text":"<ul> <li> <p> SparkFun Pro Micro - RP2350 SKU: DEV-24870 <p> <p> </p> <li> <p>The SparkFun Pro Micro - RP2350 provides a powerful development platform in SparkFun's compact Pro Micro form factor built around the RP2350 from the Raspberry Pi Foundation. This board uses the updated Pro Micro form factor and includes a USB-C connector, Qwiic connector, WS2812B addressable RGB LED, Boot and Reset buttons, resettable PTC fuse as well as PTH and castellated solder pads. This board also includes external memory for the RP2350 with 16MB Flash and 8MB PSRAM both tied to the RP2350's QSPI controller.      The RP2350 is a unique dual-core microcontroller with two ARM<sup>\u00ae</sup> Cortex<sup>\u00ae</sup> M33 processors and two Hazard3 RISC-V processors, all running at up to 150 MHz! Now, this doesn't mean the RP2350 is a quad-core microcontroller. Instead, users can select which two processors to run on boot instead. You can run two processors of the same type or one of each. The RP2350 also features 520kB SRAM in ten banks, a host of peripherals including two UARTs, two SPI and two I<sup>2</sup>C controllers, and a USB 1.1 controller for host and device support.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>For basic use of the Pro Micro - RP2350 all you'll need is a USB-C cable like the ones listed below:</p> <ul> <li> <p> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot CAB-14743 </p> <li> <p> <p> </p> <p> Reversible USB A to C Cable - 2m CAB-15424 </p> <p>You may also want to get a Qwiic cable or kit to connect the Pro Micro - RP2350 to other Qwiic devices:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit PRT-15081 </p>"},{"location":"single_page/#tools","title":"Tools","text":"<p>If you prefer a soldered connection or want to modify the solder jumpers on this board, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> PINECIL - Smart Mini Portable Soldering Iron TOL-23913 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL TOL-14579 </p>"},{"location":"single_page/#camera-psram-example-materials","title":"Camera PSRAM Example Materials","text":"<p>This guide includes a detailed example on how to use the PSRAM included on the Pro Micro - RP2350 using a camera connected to the board. If you'd like to follow along with that example, you'll need the following materials. You'll certainly need the camera linked below along with optionaly headers, a breadboard, and jumper wire for prototyping the circuit.</p> <ul> <li> <p> <p>Arducam 5MP Plus OV5642 Mini Camera Module DEV-18440</p> <li> <p> <p>Break Away Headers - Straight PRT-00116</p> <li> <p> <p>Breadboard - Full-Size (Bare) PRT-12615</p> <li> <p> <p>Jumper Wire Kit - 140pcs PRT-00124</p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>Let's take a closer look at the RP2350 and other hardware on this Pro Micro.</p>"},{"location":"single_page/#raspberry-pi-rp2350","title":"Raspberry Pi RP2350","text":"<p>The RP2350 from Raspberry Pi packs a whole lot of computing punch in a tiny package. The RP2350 is a unique dual-core microcontroller that has four internal processors (two Arm Cortex-M33 and two Hazard3 RISC-V processors @150 MHz), though you can only select any two of these four to run at the same time. </p> <p></p> <p>This internal configuration allows users to customize the chip to their preferred architecture or to use one of each! The RP2350 includes 520kB of on-chip SRAM in ten independent banks and 8kB of one-time-programmable (OTP) storage. It also has an impressive set of security features including optional boot signing with protected OTP storage for the boot decryption key, global bus filtering (based on either Arm or RISC-V security and privilege levels) and more. For a complete overview of the RP2350, refer to the datasheet.</p> <p>The Pro Micro - RP2350 uses the \"A\" version of the microcontroller which has 30 3.3V-tolerant GPIO with 4 analog inputs and also includes the following peripheral options:</p> <ul> <li>2x UART</li> <li>2x SPI</li> <li>2x I<sup>2</sup>C</li> <li>24 PWM</li> <li>USB 1.1 Controller</li> <li>12 PIO State Machines</li> <li>1x High-Speed Transmit (HSTX) Peripheral for DVI/DSI support (not available on Pro Micro)</li> </ul> <p>Pro Micro Footprint Constraints</p> <p>Due to size constraints on the Pro Micro footprint, only 18 GPIO are broken out, including all four analog inputs. Unfortunately, this means HSTX is not supported on the Pro Micro - RP2350.</p> <p>The RP2350 uses five separate power supplies though this board (and most applications) combines several of them into a single regulated 3.3V supply voltage provided either over the USB-C connector or to the RAW pin. If using the RAW pin, max input voltage is 5.3V as RAW connects directly to the WS2812 LED. </p>"},{"location":"single_page/#memory","title":"Memory","text":""},{"location":"single_page/#w25q128-flash","title":"W25Q128 Flash","text":"<p>The W25Q128 Flash IC adds 16MB of extra programming space on the Pro Micro. This connects to the RP2350 over QSPI. </p> <p></p>"},{"location":"single_page/#psram","title":"PSRAM","text":"<p>The Pro Micro also includes an 8MB PSRAM IC for dynamic storage. This also connects to the RP2350 over QSPI. PSRAM support is included in the SparkFun MicroPython \"early release\" firmware found later in this guide and on the product page, but is not natively supported in the Pico SDK as of release. Refer to the Arducam Demo section of this guide for information on how to enable and set up PSRAM using the Pico SDK.</p> <p></p> <p>For a complete overview of the PSRAM IC, refer to the datasheet.</p>"},{"location":"single_page/#connectors-pinout","title":"Connectors &amp; Pinout","text":""},{"location":"single_page/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB-C connector on the board acts as the primary power and programming interface. It also has surface mount solder pads on the bottom of the board for connections to the USB data lines and USB voltage. The USB-C voltage is regulated down to 3.3V which powers all components on the board. The board also has a RAW PTH pin to provide a dedicated supply voltage. If using this pin, the maximum voltage allowed is 5.3V as RAW connects directly to the WS2812.</p> <p></p>"},{"location":"single_page/#qwiic-connector","title":"Qwiic Connector","text":"<p>The board includes a Qwiic connector connected to GPIO 16 (SCL) and GPIO 17 (SDA) with pull-up resistors to 3.3V.</p> <p></p>"},{"location":"single_page/#pinout","title":"Pinout","text":"<p>This Pro Micro breaks out a total of 28 pins from the RP2350 including four analog pins, two UART interfaces, SPI, and six GPIO. All I/O pins are 3.3V tolerant.</p> <p></p>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>This Pro Micro has two LEDs; a red Power LED tied to the 3.3V line and a a WS2812 RGB LED connected to pin 25 on the RP2350.</p> <p></p> <p>The board also has a solder pad on the bottom of the board labeled D0 that users can solder to if they would like to daisy chain more WS2812 LEDs to the one on the board.</p>"},{"location":"single_page/#buttons","title":"Buttons","text":"<p>The board has two push buttons connected to the RP2350's Reset and Boot lines.</p> <p></p> <p>Holding down the BOOT button during power-up or reset bypasses Flash boot mode and forces the RP2350 into USB boot mode. The buttons are labeled on the back side of the board. If you are looking at them in the orientation of the image above, the BOOT button is on top and the RESET button is on bottom.</p>"},{"location":"single_page/#solder-jumpers","title":"Solder Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p> <p>There are two solder jumpers on the Pro Micro labeled PWR and SHLD.</p> <p></p> <p>The PWR jumper completes the Power LED circuit and is closed by default. Open it to disable the power LED when trying to minimize the total current draw of the board. The SHLD jumper ties the USB-C connector's shield pin to the Pro Micro's ground plane and is closed by default. Open it to isolate this pin from the board's ground.</p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>This board matches the Pro Micro footprint and measures 1.3in x 0.7in (33.02mm x 17.78mm).</p> <p></p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files for the board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"single_page/#basic-assembly","title":"Basic Assembly","text":"<p>Getting started with the Pro Micro - RP2350 is as easy as plugging it in over USB. The board ships with simple code that cycles the WS2812 RGB LED through a rainbow so on initial power up you should see that cycle.</p> <p></p> <p>From here, you can quickly get started programming the board with either the Pico SDK or MicroPython. If you'd like to quickly get started with a variety of I<sup>2</sup>C devices, SparkFun carries a variety of Qwiic boards with MicroPython support such as the Optical Tracking Odometry Sensor as shown in the assembly photo below:</p> <p></p>"},{"location":"single_page/#arducam-demo-assembly","title":"Arducam Demo Assembly","text":"<p>Important!</p> <p>This is an advanced example that assumes users are familiar with using the Pico SDK to build and run projects. If you have not previously used the Pico SDK we strongly encourage going through Raspberry Pi's tutorials on getting started with it before continuing with this example.</p> <p>If you'd like to follow along with the Arducam PRSAM Demo in this guide, you'll need to connect the Arducam M5 camera module to the Pro Micro over both SPI and I<sup>2</sup>C as well as connections for input voltage and ground. We recommend soldering male headers to the Pro Micro as the photo below shows and then plugging it into a breadboard for easy prototyping.</p> <p></p> <ul> <li> How to Solder: Through-Hole Soldering </li> </ul> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p> <p>Next, connect the Arducam wire harness to the camera assembly if you have not already then connect it to the Pro Micro - RP2350 following the assembly table below:</p> Pro Micro - RP2350 Arducam Camera 5 CS 3 MOSI/COPI 4 MISO/CIPO 2 SCK 8 SDA 9 SCL 3V3 VCC GND GND <p>Finally, you'll want to connect a jumper wire between A3 and GND. The code refers to the state of A3/GPIO29 (called 29 in the code) to run the image processing algorithm. The code sets A3/GPIO29 as an input with an internal pull-up resistor enabled. When the pin is pulled LOW through the jumper wire there is no image processing and the image should appear as a normal greyscale. When the jumper is removed, the code enables the processing algorithm to apply image thresholding. </p> <p>With the wiring completed, it should look similar to the photo below</p> <p></p>"},{"location":"single_page/#software-setup","title":"Software Setup","text":""},{"location":"single_page/#uf2-bootloader","title":"UF2 Bootloader","text":"<p>The Pro Micro - RP2350 uses a UF2 bootloader for easy flashing/uploading of code to the board. The UF2 bootloader causes the board to show up on your computer as a USB storage device and does not require any drivers for Windows, Mac OSX, and Linux! This bootloader is used for uploading in both the Pico SDK and MicroPython development environments so let's take a brief look at how to enter bootload mode.</p>"},{"location":"single_page/#what-is-uf2","title":"What is UF2?","text":"<p>UF2 stands for USB Flashing Format, which was developed by Microsoft for PXT (now known as MakeCode) for flashing microcontrollers over the Mass Storage Class (MSC), just like a removable flash drive. The file format is unique, so unfortunately, you cannot simply drag and drop a compiled binary or hex file onto the board. Instead, the format of the file has extra information to tell the processor where the data goes, in addition to the data itself. For more information about UF2, you can read more from the MakeCode blog, as well as the UF2 file format specification.</p>"},{"location":"single_page/#entering-the-bootloader","title":"Entering the Bootloader","text":"<p>Putting the Pro Micro - RP2350 only requires a couple of presses of the BOOT and RESET buttons. Start by pressing and holding the BOOT button down:</p> <p></p> <p>Next, press and release the RESET button while still holding down the BOOT button:</p> <p></p> <p>Finally, release the BOOT button and the board should be in bootloader mode and appear on your computer as a USB storage device called \"RP2350\".</p>"},{"location":"single_page/#pico-sdk","title":"Pico SDK","text":""},{"location":"single_page/#raspberry-pi-pico-sdk","title":"Raspberry Pi Pico SDK","text":"<p>The Pico C SDK is a C/C++ development kit for Raspberry Pi microcontrollers including the RP2350. Click on the links below for complete documentation on installing and using the SDK.</p> <p> Pico C SDK Documentation </p> <p> Pico C SDK GitHub Repository </p>"},{"location":"single_page/#pro-micro-rp2350-board-definition","title":"Pro Micro - RP2350 Board Definition","text":"<p>With the release of Pico SDK v2.1, the Pro Micro - RP2350 is included with it's on board definition. When uploading, select <code>sparkfun_promicro_rp2350</code>.</p>"},{"location":"single_page/#micropython","title":"MicroPython","text":""},{"location":"single_page/#setup","title":"Setup","text":"<p>MicroPython is an application of the Python 3 language that runs on microcontrollers like the Pro Micro - RP2350 that allows you to easily interact with the board directly over a USB serial interface through either a command line interface or your preferred Python IDE such as Thonny. We'll do a quick overview of how to download MicroPython firmware on to the Pro Micro - RP2350 but for a complete overview of using MicroPython with this and other RP2350 boards, head over to Raspberry Pi's documentation by clicking the button below:</p> <p> Raspberry Pi MicroPython Docs </p>"},{"location":"single_page/#uf2-firmware","title":"UF2 Firmware","text":"<p>As of this writing, we're waiting on the next release of MicroPython to include UF2 files for the Pro Micro - RP2350 so to get users started before then, we have Beta releases of MicroPython firmware available here or by clicking the button below:</p> <p> SparkFun MicroPython Beta Releases </p> <p>Download the latest release then put the Pro Micro - RP2350 into UF2 bootloader mode and open the location the board appeared as a USB storage device (it should appear as \"RP2350\"). Next, drag and drop the UF2 file into the RP2350 folder and the board should reboot. Next, open up your preferred MicroPython IDE (or command line interface) and you can start interacting with your Pro Micro. Read on to the MicroPython examples section for a few quick examples to make sure everything is working properly.</p>"},{"location":"single_page/#circuitpython","title":"CircuitPython","text":""},{"location":"single_page/#setup_1","title":"Setup","text":"<p>The Pro Micro - RP2350 is included in the latest release of CircuitPython. If you've never used CircuitPython before, take a read through their tutorial here or click the button below:</p> <p> Welcome to CircuitPython </p>"},{"location":"single_page/#thing-plus-rp2350-firmware","title":"Thing Plus - RP2350 Firmware","text":"<p>Download the latest firmware for the Pro Micro - RP2350 from the CircuitPython downloads page and search for \"Pro Micro RP2350\".</p>"},{"location":"single_page/#arduino","title":"Arduino","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p>"},{"location":"single_page/#arduino-pico-boards","title":"Arduino-Pico Boards","text":"<p>The SparkFun Pro Micro - RP2350 is supported on the Arduino IDE in the Arduino-Pico boards package. To install the package, open the Preferences menu by navigating to File &gt; Preferences. Look at the bottom of the Preferences menu for \"Additional boards manager URLS\" and then copy this JSON link into that field:</p> <p><code>     https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json </code></p> <p>Click \"OK\" to close this menu then navigate to the Boards Manager tool and search for \"pico\" and download the latest release of \"Raspberry Pi Pico\" (4.0.1 or later).</p> <p></p> <p>For more information on using the Arduino-Pico boards package, check out their documentation page.</p>"},{"location":"single_page/#examples","title":"Examples","text":""},{"location":"single_page/#arducam-demo","title":"Arducam Demo","text":"<p>Important!</p> <p>This is an advanced example that assumes users are familiar with using the Pico SDK to build and run projects. If you have not previously used the Pico SDK we strongly encourage going through Raspberry Pi's tutorials on getting started with it before continuing with this example.</p> <p>The Arducam PSRAM Example is a modified version of Arducam's Videostreaming example that uses the Arducam to take still images and send them to the RP2350 and then process and transmit the images over USB to be displayed using a Processing sketch. The primary goal of this example is to demonstrate how to set up and use PSRAM on the Pro Micro - RP2350 using the Pico SDK and the cool images are a neat bonus!</p> <p></p>"},{"location":"single_page/#software-requirements","title":"Software Requirements","text":"<p>Along with the Pico SDK, you'll need to install the following items for this demo to run properly.</p>"},{"location":"single_page/#pico-sdk-cam-driver","title":"Pico SDK Cam Driver","text":"<p>This example uses the Pico SDK, Arducam's Pico Cam driver for the SDK. The example files include the necessary Arducam driver installation but if you'd like to install it separately you can find it in the ArduCAM GitHub repo here.</p>"},{"location":"single_page/#processing-software","title":"Processing Software","text":"<p>You'll also need to download and install the Processing software. You can download the program by clicking the button below:</p> <p> Processing Downloads Page </p>"},{"location":"single_page/#arducam-demo-files","title":"Arducam Demo Files","text":"<p>We've included pretty much everything you'll need to run the example in the Pro Micro - RP2350 GitHub repository here. If you'd like to download a compressed (ZIP) copy of the repository, click the button below:</p> <p> SparkFun Pro Micro - RP2350 Github Repository (ZIP) </p> <p>The C++, .uf2, and cmake.txt files for the example can be found in the \"/Examples/Arducam_Demo\" folder. Take note of where these are as we'll need them later on.</p>"},{"location":"single_page/#uploading-and-running-demo","title":"Uploading and Running Demo","text":"<p>With the Pico SDK set up on your computer, use the following command from the example directory to build the project:</p> <pre><code>mkdir build\ncd build\ncmake .. -DPICO_PLATFORM=rp2350 -DPICO_BOARD=sparkfun_promicro_rp2350\nmake\n</code></pre> <p>Next, set the Pro Micro in boot mode and upload the .uf2 file to the board.</p>"},{"location":"single_page/#processing-sketch","title":"Processing Sketch","text":"<p>Now that the Pro Micro - RP2350 is running the demo code, open the Processing sketch included in the GitHub repository download. Finally, click the \"Run\" button in the top left of the Processing window and it should open a new window to display the images the camera is taking. We've done our best to speed up the time between the Arducam capturing an image and displaying it on the computer but it can take a few seconds in between shots. With the camera steady, you should start to see greyscale images like this fancy photo of the ceiling in the SparkFun engineering department:</p> <p></p> <p>Now try unplugging the jumper wire between A3 and GND and the next images should be in purely black and white (thresholded) like the screenshot below:</p> <p></p>"},{"location":"single_page/#psram-code-to-note","title":"PSRAM Code to Note","text":"<p>Pico SDK PSRAM Support</p> <p>The Pico SDK may include official PSRAM support for the Pro Micro - RP2350 in the future. This is simply a demo to get users started while that support is being implemented.</p> <p>The primary goal of this demo is to show how to implement and use PSRAM in your own projects. It's fairly involved and requires overriding the default PSRAM allocations to work with the Pro Micro.</p>"},{"location":"single_page/#cmakeliststxt","title":"CMakeLists.txt","text":"<p>The CMakeLists.txt file includes the commands to override the default allocation to use a custom allocation created in the \"sfe_pico_alloc\" folder.</p> <pre><code># use our own allocator\nset(SKIP_PICO_MALLOC 1)\n</code></pre> <p>It then adds a subdirectory called \"sfe_pico_alloc\" to import the custom PSRAM memory allocation for the Pro Micro - RP2350.</p> <pre><code>add_subdirectory(sfe_pico_alloc)\n\n# pull in common dependencies and additional spi hardware support\ntarget_link_libraries(arducam_demo \n    pico_stdlib\n    hardware_dma\n    hardware_i2c\n    hardware_pwm\n    ArduCAM\n    sfe_pico_alloc\n)\n</code></pre>"},{"location":"single_page/#c-psram","title":"C++ PSRAM","text":"<p>The code snippet below shows how to configure and use PSRAM with <code>malloc()</code>.</p> <pre><code>// Create buffer to store image. In this demo, malloc() has been configure to\n// use the PSRAM of the SparkFun Pro Micro RP2350, so you don't need to do\n// anything else to use the PSRAM!\nimageBuf = (uint8_t*) malloc(nRows * nCols);\nif (!imageBuf)\n{\n    // Always good practice to verify that malloc() worked\n    printf(\"Malloc failed! Exiting example\\n\");\n    return 1;\n}\n</code></pre>"},{"location":"single_page/#micropython-examples","title":"MicroPython Examples","text":""},{"location":"single_page/#verify-micropython-firmware-hardware","title":"Verify MicroPython Firmware &amp; Hardware","text":"<p>First, to make sure everything is running properly, use the <code>sys</code> module to verify the firmware version and machine/board running. Open your preferred interface and enter the following prompts and you should see something similar to the printout below:</p> <pre><code>import sys\nsys.implementation\n(name='micropython', version=(1, 24, 0, 'preview'), _machine='SparkFun Pro Micro RP2350 with RP2350', _mpy=7942)\n</code></pre>"},{"location":"single_page/#verify-memory-internal-and-psram","title":"Verify Memory (Internal and PSRAM)","text":"<p>Next, we can verify the total free memory on the Pro Micro which includes the built-in memory on the RP2350 as well as the 8MB PSRAM. We'll use the <code>gc</code> module for this so type in the prompt below and you should see a response close to the value below:</p> <pre><code>import gc\ngc.mem_free()\n8640352\n</code></pre>"},{"location":"single_page/#ws2812-led-control","title":"WS2812 LED Control","text":"<p>Finally, we'll make sure we can properly control the WS2812 LED on the Pro Micro using the <code>machine</code> and <code>neopixel</code> classes. The WS2812 Data In pin connects to I/O 25 on the RP2350 so we'll create a pin for it as an OUTPUT and assign it to the LED object. Next, we'll set the color to red and finally write the color values to the LED. The code below goes through all these steps so try copying it on your machine and you should see the WS2812 LED turn red.</p> <pre><code>import machine, neopixel\npin = machine.Pin(25, machine.Pin.OUT)\nled = neopixel.NeoPixel(pin, 1)\nled[0] = (255, 0, 0)\nled.write()\n</code></pre> <p>Try playing around with other values between 0 and 255 for the three colors (R, G, B) and then writing the changes to switch the LED's displayed color.</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":"<pre><code>[SparkFun Technical Assistance Page](https://www.sparkfun.com/technical_assistance){ .md-button .md-button--primary }\n&lt;/center&gt;\n&lt;p&gt;If you can't find what you need there, head over to the &lt;a href=\"https://community.sparkfun.com/\"&gt;SparkFun Support Forum&lt;/a&gt; to create an account, search product forums, and post questions.&lt;p&gt;\n</code></pre>"},{"location":"single_page/#resources","title":"Resources:","text":"<p>For more resources related to the SparkFun Pro Micro RP2350, check out the links listed here: </p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> <li>RP2350 Datasheet (PDF)</li> <li>APS6404L PRSAM Datasheet (PDF)</li> <li>RP2350 MicroPython Firmware (Beta)</li> <li>SparkFun Pico SDK Library</li> <li>Arduino Pico Arduino Core</li> <li>Raspberry Pi RP2350 Microcontroller Documentation</li> <li>Hardware GitHub Respository</li> <li>SFE Product Showcase</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, head over to the SparkFun Support Forum to create an account, search product forums, and post questions.<p></p>"},{"location":"uf2/","title":"UF2 Bootloader","text":"<p>The Pro Micro - RP2350 uses a UF2 bootloader for easy flashing/uploading of code to the board. The UF2 bootloader causes the board to show up on your computer as a USB storage device and does not require any drivers for Windows, Mac OSX, and Linux! This bootloader is used for uploading in both the Pico SDK and MicroPython development environments so let's take a brief look at how to enter bootload mode.</p>"},{"location":"uf2/#what-is-uf2","title":"What is UF2?","text":"<p>UF2 stands for USB Flashing Format, which was developed by Microsoft for PXT (now known as MakeCode) for flashing microcontrollers over the Mass Storage Class (MSC), just like a removable flash drive. The file format is unique, so unfortunately, you cannot simply drag and drop a compiled binary or hex file onto the board. Instead, the format of the file has extra information to tell the processor where the data goes, in addition to the data itself. For more information about UF2, you can read more from the MakeCode blog, as well as the UF2 file format specification.</p>"},{"location":"uf2/#entering-the-bootloader","title":"Entering the Bootloader","text":"<p>Putting the Pro Micro - RP2350 only requires a couple of presses of the BOOT and RESET buttons. Start by pressing and holding the BOOT button down:</p> <p></p> <p>Next, press and release the RESET button while still holding down the BOOT button:</p> <p></p> <p>Finally, release the BOOT button and the board should be in bootloader mode and appear on your computer as a USB storage device called \"RP2350\".</p>"},{"location":"assets/board_files/","title":"board_files directory","text":"<ol> <li>A <code>dimensions*.pdf</code> file containing the board's measurements.</li> <li>A <code>schematic.pdf</code> file containing the board's schematics.</li> <li>An <code>eagle_files*.zip</code> folder containing the Eagle CAD schematics (<code>*.sch</code>) and PCB design (<code>*.brd</code>) files.<ul> <li>A freeware version of Autodesk Eagle can be found here. </li> </ul> </li> </ol>"},{"location":"assets/component_documentation/","title":"component_documentation directory","text":"<p>Copies of the datasheets, user manuals, programming guides, etc. of the major electrical components on the board.</p>"},{"location":"github/","title":"github directory","text":"<p>This folder should contain the instructions for submitting issues and pull requests for this project</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the  repository."},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the  repository."},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the  repository."},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the  repository."},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}